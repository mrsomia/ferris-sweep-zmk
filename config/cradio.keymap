// COPYRIGHT (C) 2022 THE ZMK CONTRIBUTORS
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// Home row mods macro

#define HRML(k1,k2,k3,k4) &ht LGUI k1  &ht LALT k2  &ht LCTRL k3  &ht LSHFT k4
#define HRMR(k1,k2,k3,k4) &ht RSHFT k1  &ht RCTRL k2  &ht RALT k3  &ht RGUI k4

// Layer definitions

#define BASE 0
#define NUM 1
#define SYM 2
#define FNC 3
#define NAV 4
#define MEDIA 5
#define SETTINGS 6

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

/ {
    behaviors {
        lhmr: left_hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;

            label = "LEFT_HMR";
            hold-trigger-key-positions = <5 6 15 16 25 26 32 33 7 8 9 17 18 19 27 28 29 30 31>;
            hold-trigger-on-release;
        };

        rhmr: rhmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;

            label = "Right_hmr";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
        };

        // poistional holds for shift cmd and alt

        lshift: left_shift_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33 30 31>;
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
        };

        // poistional holds for shift cmd and alt

        rshift: right_shift_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
        };

        caps: shift_caps {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CAPS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        tdboot: tap_dance_boot {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&none>, <&bootloader>;
        };

        tdreset: tap_dance_reset {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&none>, <&sys_reset>;
        };

        tdance: tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
        };

        rlt: repeat_layer_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "Repeat_layer_toggle";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };

        shifty: sticky_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFTY";
            #binding-cells = <0>;
            bindings = <&skq LSHFT>, <&caps_word>;
        };

        shift_layer: shift_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "LSHIFT";
            bindings = <&lt>, <&shifty>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        skq: sticky_key_quick {
            compatible = "zmk,behavior-sticky-key";
            label = "sticky_key_quick";
            bindings = <&kp>;
            #binding-cells = <1>;
            quick-release;
            lazy;
            release-after-ms = <1000>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc_lt {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&lt 6 ESC>;
        };

        combo_delete {
            bindings = <&lt 3 DEL>;
            key-positions = <32 33>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <2 3>;
            require-prior-idle-ms = <150>;
        };

        combo_bspc {
            bindings = <&kp BSPC>;
            key-positions = <7 8>;
            require-prior-idle-ms = <150>;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            require-prior-idle-ms = <150>;
        };

        combo_del {
            bindings = <&kp DELETE>;
            key-positions = <6 7>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_ret {
            bindings = <&kp RET>;
            key-positions = <17 18>;
        };
    };

    //  conditional_layers {
    //      compatible = "zmk,conditional-layers";
    //      tri_layer {
    //          if-layers = <1 2>;
    //          then-layer = <3>;
    //      };
    //  };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp Q         &kp W         &kp E          &kp R            &kp T               &kp Y         &kp U            &kp I            &kp O          &kp P
&lhmr LGUI A  &lhmr LALT S  &lhmr LCTRL D  &lshift LSHFT F  &kp G               &kp H         &rshift RSHFT J  &rhmr RCTRL K    &rhmr RALT L   &rhmr RGUI SQT
&kp Z         &kp X         &kp C          &kp V            &kp B               &kp N         &kp M            &mt MINUS COMMA  &mt UNDER DOT  &mt COLON FSLH
                                           &lt 4 SPACE      &shift_layer 5 0    &rlt 2 ENTER  &rlt 1 BSPC
            >;
        };

        num {
            bindings = <
&kp LBKT   &kp N7             &kp N8             &kp N9             &kp RBKT     &trans   &trans     &trans     &trans    &tdreset
&kp SEMI   &mt RG(RS(N4)) N4  &mt RG(RS(N5)) N5  &kp N6             &kp EQUAL    &kp DOT  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
&kp GRAVE  &kp N1             &kp N2             &mt RG(RS(N3)) N3  &kp BSLH     &trans   &trans     &trans     &trans    &bootloader
                                                 &kp N0             &kp MINUS    &trans   &trans
            >;
        };

        symbols {
            bindings = <
&kp LBRC   &kp AMPS    &kp ASTRK  &mt RPAR LPAR          &kp RBRC     &trans   &trans     &trans     &trans    &tdreset
&kp COLON  &kp DOLLAR  &kp PRCNT  &kp CARET              &kp PLUS     &kp DOT  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
&kp TILDE  &kp EXCL    &kp AT     &mt HASH RA(N3)        &kp PIPE     &trans   &trans     &trans     &trans    &bootloader
                                  &kp RIGHT_PARENTHESIS  &kp UNDER    &trans   &trans
            >;
        };

        func {
            bindings = <
&kp F12  &kp F7  &kp F8  &kp F9  &kp PRINTSCREEN    &trans  &trans     &trans     &trans    &tdreset
&kp F11  &kp F4  &kp F5  &kp F6  &none              &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
&kp F10  &kp F1  &kp F2  &kp F3  &none              &trans  &trans     &trans     &trans    &tdboot
                         &none   &none              &trans  &trans
            >;
        };

        nav {
            bindings = <
&tdreset  &trans    &trans     &trans     &trans           &kp LG(LEFT_BRACKET)  &kp RG(RS(LEFT_BRACKET))  &kp RS(RG(RBKT))  &kp RG(RIGHT_BRACKET)  &caps
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &kp BACKSPACE    &kp LEFT              &kp DOWN                  &kp UP            &kp RIGHT              &kp ESC
&tdboot   &trans    &trans     &trans     &trans           &kp HOME              &kp PG_DN                 &kp PG_UP         &kp END                &caps
                               &none      &none            &kp ENTER             &kp SPACE
            >;
        };

        media {
            bindings = <
&tdreset  &trans    &trans     &trans     &trans           &bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3   &bt BT_CLR
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &kp BACKSPACE    &kp C_BRI_DEC  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_BRI_INC  &kp ESC
&tdboot   &trans    &trans     &trans     &trans           &out OUT_TOG   &kp C_PREV    &kp C_PP      &kp C_NEXT     &caps
                               &none      &none            &kp ENTER      &kp SPACE
            >;
        };

        settings {
            bindings = <
&tdreset  &trans    &trans     &trans     &trans    &trans        &trans        &trans        &trans        &trans
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &none         &kp C_PREV    &kp C_PP      &kp C_NEXT    &kp ESC
&tdboot   &trans    &trans     &trans     &trans    &kp C_BRI_UP  &kp C_VOL_UP  &kp C_VOL_DN  &kp C_BRI_DN  &caps
                               &none      &none     &trans        &trans
            >;
        };
    };
};
